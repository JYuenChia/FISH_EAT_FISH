package javaFXApplication2;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import javafx.util.Duration;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.binding.Bindings;
import javafx.fxml.FXMLLoader;
import javafx.scene.Group;
import javafx.scene.Parent;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;


/**
 *
 * @author weiyi
 */
public class Prototype1 extends Application {

    // Base Fish class
    abstract class Fish {
        Image image;
        double x, y;
        double speed;
        double size;

        Fish(String filePath, double size, double speed) {
            this.image = new Image("file:" + filePath);
            this.x = 1400;
            this.y = new Random().nextInt(810 - (int) size);
            this.size = size;
            this.speed = speed;
        }

        void move() {
            x -= speed;
            if (x < -size) {
                x = 1400;
                y = new Random().nextInt(810 - (int) size);
            }
        }

        void draw(GraphicsContext gc) {
            gc.drawImage(image, x, y, size, size);
        }
    }

    // EnemyFish class
    class EnemyFish extends Fish {
        boolean moveLeft;

        EnemyFish(String filePath, double size, double speed, boolean moveLeft) {
            super(filePath, size, speed);
            this.moveLeft = moveLeft;
            if (!moveLeft) {
                this.x = -size;
            }
        }

        @Override
        void move() {
            if (moveLeft) {
                super.move();
            } else {
                x += speed;
                if (x > 1400 + size) {
                    x = -size;
                    y = new Random().nextInt(1000 - (int) size);
                }
            }
        }
    }

    // PlayerFish class
    class PlayerFish extends Fish {
        double growthRate = 1.05;

        PlayerFish(String filePath, double size, double speed) {
            super(filePath, size, speed);
            this.x = 100;
            this.y = 300;
        }

        void grow() {
            size *= growthRate;
        }

        @Override
        void draw(GraphicsContext gc) {
            gc.drawImage(image, x, y, size, size);
            gc.fillText("Size : " + (int) size, x, y - 10);
            
        }
        void updateFishImage(String filePath) {
        this.image = new Image("file:" + filePath);
        
        }
    }

    private ArrayList<EnemyFish> enemyFishList;
    private Canvas canvas;
    private PlayerFish playerFish;
    private int level = 1;
    private int score = 0;
    private int FishEaten = 0;
    private Timeline gameLoop;
    
    private boolean up, down, left, right;
    
   
    @Override
    
    
    
    public void start(Stage stage) {
        Pane root = new Pane();
        
        canvas = new Canvas(1550, 810);
        
        Scene scene = new Scene(root,1550,810);

        Image icon = new Image("file:/C:/Users/weiyi/Documents/2444557-1/24004557/icon.png");
        stage.getIcons().add(icon);
        stage.setResizable(false);
        stage.setFullScreen(true);
        
        Text textEsc = new Text("Exit Fullscreen Press ESC");        
        textEsc.setX(700);
        textEsc.setY(10);
     
        textEsc.fontProperty().bind(Bindings.createObjectBinding(() -> 
        Font.font(stage.getHeight() / 60), stage.heightProperty()));
      

        Image imageBG = new Image("file:C:\\Users\\weiyi\\Downloads\\Telegram Desktop\\BG.png");
        ImageView imageViewBG = new ImageView(imageBG);
        imageViewBG.setFitWidth(1550);
        imageViewBG.setFitHeight(810);
        imageViewBG.fitWidthProperty().bind(stage.widthProperty());
        imageViewBG.fitHeightProperty().bind(stage.heightProperty());
        imageViewBG.setPreserveRatio(true);
        imageViewBG.setX(0);
        imageViewBG.setY(0);
        
        
        
        
        root.getChildren().add(imageViewBG);

        enemyFishList = new ArrayList<>();

        // Initialize enemy fish for Level 1
        spawnFish("C:/Users/weiyi/Downloads/Telegram Desktop/small_fish.png", 100, 2, true, 5);

        // Initialize player fish
        playerFish = new PlayerFish("C:/Users/weiyi/Downloads/Telegram Desktop/player_fish.png", 100, 5);

        scene.setOnKeyPressed(this::handleKeyPress);
        scene.setOnKeyReleased(this::handleKeyRelease);

        GraphicsContext gc = canvas.getGraphicsContext2D();

        gameLoop = new Timeline(new KeyFrame(Duration.millis(16), e -> {
            gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
//            if(level==2){
//                
//            if(right){
//            playerFish.updateFishImage("C:/Users/weiyi/Downloads/medium_fish_player2.png");
//            }else if(left){
//                playerFish.updateFishImage("C:/Users/weiyi/Downloads/Telegram Desktop/medium_fish_player.png");}
//            }
            if (level == 2){
                
                if(right){
                playerFish.updateFishImage("C:/Users/weiyi/Downloads/medium_fish_player2.png");
                }else if(left){
                    playerFish.updateFishImage("C:/Users/weiyi/Downloads/Telegram Desktop/medium_fish_player.png");}
            } 
            
            if (level == 3) {
                
                if(right){
                playerFish.updateFishImage("C:/Users/weiyi/Downloads/big_fish_player2.png");
                }else if(left){
                    playerFish.updateFishImage("C:/Users/weiyi/Downloads/Telegram Desktop/big_fish_player.png");}
                }    
            if (level == 4) {
                
                if(right){
                playerFish.updateFishImage("C:/Users/weiyi/Downloads/giant_fish_player2.png");
                }else if(left){
                    playerFish.updateFishImage("C:/Users/weiyi/Downloads/Telegram Desktop/giant_fish_player.png");}
            } 
               
            updatePlayerMovement();

            // Draw and move player fish
            playerFish.draw(gc);

            // Draw and move enemy fish
            for (int i = 0; i < enemyFishList.size(); i++) {
                EnemyFish fish = enemyFishList.get(i);
                fish.move();
                fish.draw(gc);
            }
            
            
            
            double canvasWidth = canvas.getWidth();
            double canvasHeight = canvas.getHeight();
            double fishX = playerFish.speed;
            double fishY = playerFish.speed;
           
 //*********can't make it *********************************************************************************
//          // Apply boundary checks to prevent the fish from moving outside the canvas
//            if (fishX < 0) fishX = 0; // Left boundary
//            if (fishY < 0) fishY = 0; // Top boundary
//            if (fishX + playerFish.size > 1550) fishX = 1550 - playerFish.size; // Right boundary
//            if (fishY + playerFish.size > 810) fishY = 810 - playerFish.size; // Bottom boundary    
//            
//*********************************************************************************************************************
//             Display score and level
            

            handleCollisions(gc);    
            
            gc.fillText("Score: " + score,50, 50);
            gc.fillText("Number of Fish Eaten: " + FishEaten, 50,80 );
            gc.fillText("Level: " + level, 50, 110);

            // Adjust fish population based on score and level
//      
                   


            if (score >= 5 && level == 1) {
                spawnFish("C:/Users/weiyi/Downloads/Telegram Desktop/medium_fish.png", 120, 3, false, 3);
                level++;
            } else if (score >= 15 && level == 2) {
                spawnFish("C:/Users/weiyi/Downloads/Telegram Desktop/big_fish.png", 150, 4, true, 2);    
                level++;
            } else if (score >= 30 && level == 3) {
                spawnFish("C:/Users/weiyi/Downloads/Telegram Desktop/giant_fish.png", 200, 5, true, 1);      
                level++;
            }
           
           
            
        }));
        

        gameLoop.setCycleCount(Animation.INDEFINITE);
        gameLoop.play();
    
        root.getChildren().add(canvas);
        root.getChildren().add(textEsc);
        
        stage.setScene(scene);   
        stage.setTitle("Fish Eat Fish Game");
        stage.show();
    }

    private void handleCollisions(GraphicsContext gc) {
        for (int i = 0; i < enemyFishList.size(); i++) {
            EnemyFish enemyFish = enemyFishList.get(i);

            if (checkCollision(playerFish, enemyFish)) {
                if (playerFish.size >= enemyFish.size) {
                    // Player eats the enemy fish
                    enemyFishList.remove(i);
                    i--; // Adjust index
                    
                    score+=5;
                    FishEaten+=1;                   
                    playerFish.grow();
                    
//                    
//                    if (level == 2) {
//                        playerFish.updateFishImage("C:/Users/weiyi/Downloads/Telegram Desktop/medium_fish_player.png");  
//                        
//                    }
//                    if (level == 3) {
//                        playerFish.updateFishImage("C:/Users/weiyi/Downloads/Telegram Desktop/big_fish_player.png");
//                   
//                    }
//                    if (level == 4) {
//                        playerFish.updateFishImage("C:/Users/weiyi/Downloads/Telegram Desktop/giant_fish_player.png");
//                        if(turnRight)
//                        playerFish.updateFishImage("C:/Users/weiyi/Downloads/giant_fish_player2.png");
//                        
//                    }
                    
                    
                } else {
                    // Game over logic
                    gc.fillText("Game Over!", canvas.getWidth() / 2 - 50, canvas.getHeight() / 2);
                    System.out.println("Game Over!");
                    gameLoop.stop();
//                    gc.fillText("Score: " + score,400, 250);
                    Pane root = new Pane();
                    Stage stage = new Stage();
                    Scene scene = new Scene(root,800,450);
                    
                    Image icon = new Image("file:/C:/Users/weiyi/Documents/2444557-1/24004557/icon.png");
                    stage.getIcons().add(icon);
                    
                    Text ScoreInTheEnd = new Text("YOUR SCORE: "+score);        
                    ScoreInTheEnd.setX(300);
                    ScoreInTheEnd.setY(250);

                    Text EatenFishInTheEnd = new Text("YOUR LEVEL: "+level);        
                    EatenFishInTheEnd.setX(300);
                    EatenFishInTheEnd.setY(300);
                    
                    ScoreInTheEnd.fontProperty().bind(Bindings.createObjectBinding(() -> 
                    Font.font("Comic Sans MS" , stage.getHeight() / 20), stage.heightProperty()));
                    
                    EatenFishInTheEnd.fontProperty().bind(Bindings.createObjectBinding(() -> 
                    Font.font("Comic Sans MS" , stage.getHeight() / 20), stage.heightProperty()));
                    
                    Image imageBG = new Image("file:C:\\Users\\weiyi\\Downloads\\1.png");
                    ImageView imageViewBG = new ImageView(imageBG);
                    imageViewBG.setFitWidth(800);
                    imageViewBG.setFitHeight(450);
                    imageViewBG.setPreserveRatio(true);
                    imageViewBG.setX(0);
                    imageViewBG.setY(0);
                    
                    root.getChildren().add(imageViewBG);
                    root.getChildren().add(ScoreInTheEnd);
                    root.getChildren().add(EatenFishInTheEnd);
                    
                    
                    stage.setScene(scene);   
                    stage.setTitle("Fish Eat Fish Game");
                    stage.show();
                    
                    try{
                            PrintWriter out = new PrintWriter(new FileOutputStream("Fish.txt."));
                            out.println("Score: " + score);
                            out.println("Level: " + level);
                            
                            out.close();
                        }catch(IOException a){
                            System.out.println("Problem");
                        }
//                    
                    return;
                }
            }
        }
    }

    
 
    private void handleKeyPress(KeyEvent event) {
        
        if (event.getCode() == KeyCode.UP)up = true;
        else if (event.getCode() == KeyCode.DOWN)down = true;     
        else if (event.getCode() == KeyCode.LEFT)left = true;
        else if (event.getCode() == KeyCode.RIGHT)right = true;

    }

    private void handleKeyRelease(KeyEvent event) {
        if (event.getCode() == KeyCode.UP) up = false;
        else if (event.getCode() == KeyCode.DOWN) down = false;
        else if (event.getCode() == KeyCode.LEFT) left = false;
        else if (event.getCode() == KeyCode.RIGHT) right = false;
    }

    private void updatePlayerMovement() {
        if (up) playerFish.y -= playerFish.speed;
        if (down) playerFish.y += playerFish.speed;
        if (left) playerFish.x -= playerFish.speed;
        if (right) playerFish.x += playerFish.speed;
    }

    private boolean checkCollision(Fish player, Fish enemy) {
         // Use a reduced size to handle collision checking more accurately for large fish
        double playerSizeFactor = player.size * 0.2; // Reduced size for more lenient collision
        double enemySizeFactor = enemy.size * 0.2;  // Reduced size for more lenient collision
        
        double playerLeft = player.x;
        double playerRight = player.x + player.size;
        double playerTop = player.y;
        double playerBottom = player.y + player.size;

        double enemyLeft = enemy.x;
        double enemyRight = enemy.x + enemy.size;
        double enemyTop = enemy.y;
        double enemyBottom = enemy.y + enemy.size;

        // Check for overlap
        boolean horizontalOverlap = playerRight > enemyLeft && playerLeft < enemyRight;
        boolean verticalOverlap = playerBottom > enemyTop && playerTop < enemyBottom;

        return horizontalOverlap && verticalOverlap;
    }

    private void spawnFish(String filePath, double size, double speed, boolean moveLeft, int count) {
        for (int i = 0; i < count; i++) {
            enemyFishList.add(new EnemyFish(filePath, size, speed, moveLeft));
        }
    }
    
    
    public static void main(String[] args) {
        launch(args);
        
        try{
            Scanner in = new Scanner (new FileInputStream("Fish.txt"));
            while(in.hasNextLine()){
                String Line = in.nextLine();
                System.out.println(Line);
            }
            
        }catch(FileNotFoundException e){
            System.out.println("Not found");
        }
        
    }
}
